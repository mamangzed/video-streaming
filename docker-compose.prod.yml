version: '3.8'

services:
  api-s3:
    build: .
    container_name: api-s3
    restart: unless-stopped
    environment:
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - PORT=8080
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-100MB}
      - FFMPEG_PATH=/usr/bin/ffmpeg
      - ENABLE_VIDEO_PROCESSING=${ENABLE_VIDEO_PROCESSING:-true}
    volumes:
      - ./temp:/root/temp
      - ./logs:/var/log/api-s3
    networks:
      - api-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    container_name: api-s3-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - api-s3
    networks:
      - api-network

  prometheus:
    image: prom/prometheus:latest
    container_name: api-s3-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - api-network

  grafana:
    image: grafana/grafana:latest
    container_name: api-s3-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboard.json:/etc/grafana/provisioning/dashboards/dashboard.json:ro
    depends_on:
      - prometheus
    networks:
      - api-network

  redis:
    image: redis:alpine
    container_name: api-s3-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - api-network

  # Optional: PostgreSQL for metadata storage
  postgres:
    image: postgres:15-alpine
    container_name: api-s3-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: api_s3
      POSTGRES_USER: api_s3_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-api_s3_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - api-network

  # Optional: Elasticsearch for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: api-s3-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - api-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: api-s3-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - api-network

volumes:
  prometheus_data:
  grafana_data:
  redis_data:
  postgres_data:
  elasticsearch_data:

networks:
  api-network:
    driver: bridge 